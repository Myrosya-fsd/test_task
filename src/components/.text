<template>
  <div class="customer-directory">
    <h2>Довідник замовників</h2>

    <div class="actions">
      <button @click="showAddCustomerModal = true">Додати замовника</button>
    </div>

    <div class="search">
      <label>
        Пошук:
        <input type="text" v-model="searchQuery" placeholder="Прізвище, Ім’я або Адреса" />
      </label>
    </div>

    <ul>
      <li v-for="(customer, idx) in filteredCustomers" :key="idx">
        <strong>{{ customer.lastName }} {{ customer.firstName }}</strong>
        — {{ customer.address }}
        <span v-if="customer.email">| Email: {{ customer.email }}</span>
        <span v-if="customer.phone">| Телефон: {{ customer.phone }}</span>
        <button @click="showCustomerApplications(customer)">Заяви</button>
      </li>
    </ul>

    <p v-if="filteredCustomers.length === 0">Нічого не знайдено</p>

    <!-- Модалка додавання замовника -->
    <div v-if="showAddCustomerModal" class="modal-overlay">
      <div class="modal">
        <h3>Додати нового замовника</h3>
        <form @submit.prevent="saveCustomer">
          <div>
            <label>Прізвище:</label>
            <input v-model="newCustomer.lastName" type="text" required />
          </div>
          <div>
            <label>Ім’я:</label>
            <input v-model="newCustomer.firstName" type="text" required />
          </div>
          <div>
            <label>Адреса:</label>
            <input v-model="newCustomer.address" type="text" required />
          </div>
          <div>
            <label>Телефон:</label>
            <input v-model="newCustomer.phone" type="tel" />
          </div>
          <div>
            <label>Email:</label>
            <input v-model="newCustomer.email" type="email" />
          </div>
          <button type="submit">Зберегти</button>
          <button type="button" @click="closeAddCustomerModal">Закрити</button>
        </form>
      </div>
    </div>

    <!-- Модалка зі списком заяв замовника -->
    <div v-if="showApplicationsModal" class="modal-overlay">
      <div class="modal">
        <h3>Заяви {{ currentCustomer.lastName }} {{ currentCustomer.firstName }}</h3>
        <ul v-if="customerApplications.length > 0">
          <li v-for="app in customerApplications" :key="app.number">
            №{{ app.number }} — {{ app.date }} — {{ app.reason }}
            <button @click="openApplication(app)">Відкрити</button>
          </li>
        </ul>
        <p v-else>Заяви відсутні</p>
        <button @click="closeApplicationsModal">Закрити</button>
      </div>
    </div>

    <!-- Модалка для відкритої заявки -->
    <div v-if="showApplicationModal" class="modal-overlay">
      <div class="modal">
        <application-form
          :next-number="currentApp.number"
          :edit-app="currentApp"
          :is-editing="isEditingApp"
          @save-application="onSaveApplication"
        />
        <div class="application-actions">
          <button @click="printCurrentApp">Друк</button>
          <button @click="deleteCurrentApp">Видалити</button>
          <button @click="closeApplicationModal">Закрити</button>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
  import { ref, computed } from 'vue';
  import ApplicationForm from './ApplicationForm.vue';

  const props = defineProps({
    applications: { type: Array, required: true },
  });

  const searchQuery = ref('');
  const showAddCustomerModal = ref(false);
  const showApplicationsModal = ref(false);
  const showApplicationModal = ref(false);

  const currentCustomer = ref(null);
  const currentApp = ref(null);

  const newCustomer = ref({
    lastName: '',
    firstName: '',
    address: '',
    phone: '',
    email: '',
  });

  const customers = computed(() => {
    const map = new Map();
    props.applications.forEach(app => {
      const key = `${app.customer.lastName}-${app.customer.firstName}-${app.customer.address}`;
      if (!map.has(key)) map.set(key, { ...app.customer });
    });
    return Array.from(map.values());
  });

  const filteredCustomers = computed(() => {
    if (!searchQuery.value) return customers.value;
    const query = searchQuery.value.toLowerCase();
    return customers.value.filter(
      c =>
        c.lastName.toLowerCase().includes(query) ||
        c.firstName.toLowerCase().includes(query) ||
        c.address.toLowerCase().includes(query)
    );
  });

  const customerApplications = computed(() => {
    if (!currentCustomer.value) return [];
    return props.applications.filter(
      app =>
        app.customer.lastName === currentCustomer.value.lastName &&
        app.customer.firstName === currentCustomer.value.firstName &&
        app.customer.address === currentCustomer.value.address
    );
  });

  // --- Дії ---
  function showCustomerApplications(customer) {
    currentCustomer.value = customer;
    showApplicationsModal.value = true;
  }

  function closeApplicationsModal() {
    showApplicationsModal.value = false;
    currentCustomer.value = null;
  }

  function openApplication(app) {
    currentApp.value = app;
    showApplicationModal.value = true;
    showApplicationsModal.value = false;
    isEditingApp.value = false; // спочатку тільки перегляд
  }

  function closeApplicationModal() {
    showApplicationModal.value = false;
    currentApp.value = null;
    isEditingApp.value = false;
  }

  function onSaveApplication(updatedApp) {
    const index = props.applications.findIndex(a => a.number === updatedApp.number);
    if (index !== -1) props.applications[index] = { ...updatedApp };
    closeApplicationModal();
  }

  function printCurrentApp() {
    const app = currentApp.value;
    if (!app) return;
    const printWindow = window.open('', '', 'width=800,height=600');
    printWindow.document.write('<html><head><title>Заява #' + app.number + '</title></head><body>');
    printWindow.document.write('<h1>Заява #' + app.number + '</h1>');
    printWindow.document.write('<p><strong>Дата:</strong> ' + app.date + '</p>');
    printWindow.document.write('<p><strong>Причина:</strong> ' + app.reason + '</p>');
    printWindow.document.write('<p><strong>Коментар:</strong> ' + app.comment + '</p>');
    printWindow.document.write('<p><strong>Потужність:</strong> ' + app.power + ' кВт</p>');
    printWindow.document.write('<p><strong>Прізвище:</strong> ' + app.customer.lastName + '</p>');
    printWindow.document.write('<p><strong>Ім’я:</strong> ' + app.customer.firstName + '</p>');
    printWindow.document.write('<p><strong>Адреса:</strong> ' + app.customer.address + '</p>');
    printWindow.document.write('<p><strong>Email:</strong> ' + app.customer.email + '</p>');
    printWindow.document.write('<p><strong>Телефон:</strong> ' + app.customer.phone + '</p>');
    if (app.files && app.files.length > 0) {
      printWindow.document.write('<h4>Документи:</h4><ul>');
      app.files.forEach(f => printWindow.document.write('<li>' + f.name + '</li>'));
      printWindow.document.write('</ul>');
    }
    printWindow.document.write('</body></html>');
    printWindow.document.close();
    printWindow.focus();
    printWindow.print();
  }

  function deleteCurrentApp() {
    const confirmed = confirm(`Видалити заяву №${currentApp.value.number}?`);
    if (!confirmed) return;
    const event = new CustomEvent('delete-application', { detail: currentApp.value });
    window.dispatchEvent(event);
    closeApplicationModal();
  }

  // --- Додавання замовника ---
  function saveCustomer() {
    props.applications.push({
      number: props.applications.length + 1,
      date: new Date().toISOString().split('T')[0],
      reason: '',
      comment: '',
      power: null,
      customer: { ...newCustomer.value },
      files: [],
    });
    closeAddCustomerModal();
    newCustomer.value = { lastName: '', firstName: '', address: '', phone: '', email: '' };
  }

  function closeAddCustomerModal() {
    showAddCustomerModal.value = false;
  }
</script>

<style scoped>
  .customer-directory {
    margin-top: 30px;
    border-top: 1px solid #ccc;
    padding-top: 20px;
  }
  .actions {
    margin-bottom: 15px;
  }
  .search {
    margin-bottom: 10px;
  }
  input[type='text'],
  input[type='tel'],
  input[type='email'] {
    padding: 5px;
    width: 300px;
  }
  ul {
    list-style: none;
    padding-left: 0;
  }
  li {
    margin-bottom: 5px;
  }
  button {
    margin-left: 10px;
    padding: 5px 10px;
  }

  /* Модальні вікна */
  .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: flex-start;
    padding-top: 50px;
    z-index: 1000;
  }
  .modal {
    background: white;
    padding: 20px;
    border-radius: 10px;
    max-width: 700px;
    width: 90%;
    max-height: 80vh;
    overflow-y: auto;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
  }
  .application-actions {
    margin-top: 15px;
    display: flex;
    justify-content: flex-start;
    flex-wrap: wrap;
  }
  .modal form {
    display: flex;
    flex-direction: column;
    gap: 12px;
  }
  .modal form div {
    display: flex;
    flex-direction: column;
  }
  .modal form label {
    font-weight: bold;
    margin-bottom: 4px;
  }
  .modal form input {
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 6px;
  }
  .modal form button {
    margin-top: 10px;
    align-self: flex-start;
  }
</style>
